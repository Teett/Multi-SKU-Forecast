mutate(date = dmy(date))
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
raw_data
raw_data %>%
replace(., is.na(.), 0)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date)) %>%
arrange(codigo)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
#Construyendo DF en tidy data
sku_data <- raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
sku_ts <- sku_data %>%
mutate(date = yearmonth(date)) %>%
as_tsibble(key = codigo, index = date)
raw_data
raw_data <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "sku_dataupdate!A1:AR250", col_types = "d") %>%
mutate(codigo = as.character(codigo),
codigo = as_factor(codigo))
#Lectura de datos y cambio de nombre a formato más deseable
dates_vector <- as.character(dmy(names(raw_data)[c(-1,-2)]))
names(raw_data)[c(-1,-2)] = dates_vector
#Construyendo DF en tidy data
sku_data <- raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date)) %>%
arrange(codigo)
#Construyendo modelo lineal con tendencia y estacionalidad para los 75 SKU seleccionados
sku_ts <- sku_data %>%
mutate(date = yearmonth(date)) %>%
as_tsibble(key = codigo, index = date)
#Train data
sku_train <- sku_ts %>%
filter(date <= yearmonth("2019 mar."))
View(sku_data)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo)
raw_data %>%
replace(., is.na(.), 0)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo)
raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date))
raw_data
raw_data <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "sku_dataupdate!A1:AR250", col_types = "d") %>%
mutate(codigo = as.character(codigo),
codigo = as_factor(codigo))
View(raw_data)
#Construyendo DF en tidy data
sku_data <- raw_data %>%
replace(., is.na(.), 0) %>%
gather(date, value, -codigo) %>%
mutate(date = dmy(date)) %>%
arrange(codigo)
View(sku_data)
sku_ts <- sku_data %>%
mutate(date = yearmonth(date)) %>%
as_tsibble(key = codigo, index = date)
#Train data
sku_train <- sku_ts %>%
filter(date <= yearmonth("2019 mar."))
model_fitted <-  sku_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
#Predicciones a 12 meses
model_forecast <- model_fitted %>%
forecast(h = "1 year")
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18404) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 47622) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18425) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18402) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18211) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 64133) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 64113) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18606) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
#Método autoplot para SKU específico
model_forecast %>%
filter(codigo == 18404) %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL)
model_forecast %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL) +
facet_wrap_paginate(~codigo, ncol = 2, nrow = 4, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
model_forecast %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL) +
facet_wrap_paginate(~codigo, ncol = 2, nrow = 4, scales = "free_y", page = 2) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
model_forecast %>%
autoplot(filter(sku_ts, year(date) >= 2016),level = NULL) +
facet_wrap_paginate(~codigo, ncol = 2, nrow = 4, scales = "free_y", page = 3) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
global_economy
global_economy %>%
filter(Country == "Colombia")
global_economy %>%
filter(Country == "Colombia") %>%
autoplot()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(x = year, y = Growth) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = year, y = Growth)) +
geom_line()
global_economy %>%
filter(Country == "Colombia")
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = Growth)) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = CPI)) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = Imports)) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = Exports)) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = Population)) +
geom_line()
global_economy %>%
filter(Country == "Colombia") %>%
ggplot(aes(x = Year, y = GDP)) +
geom_line()
aus_retail
rep("d",17)
paste0("cc",rep("d",17))
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c")
View(raw_data_dane)
?read_sheet
View(raw_data_dane)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c") %>%
unite(Año, Mes)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c") %>%
unite(Año, Mes)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c") %>%
unite(Año, Mes)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c") %>%
unite(`AÃ±o`, Mes)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199", col_types = "c", encoding="UTF-8") %>%
unite(Año, Mes)
Sys.localeconv()
Sys.getlocale()
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199") %>%
unite(Año, Mes)
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199") %>%
unite(year, month)
View(raw_data_dane)
drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199")
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199") %>%
unite(year, month)
View(raw_data_dane)
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:S199")
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:R199")
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:R199")
View(raw_data_dane)
raw_data_dane <- drive_get("https://docs.google.com/spreadsheets/d/1FuvujfVA67WrZb7mTxvMYCRv2rrNwBhltr7IzBIvITk/edit#gid=773188988") %>%
read_sheet(range = "emcm_real!A1:R199")
raw_data_dane %>%
mutate(fecha = ymd(fecha))
raw_data_dane %>%
mutate(fecha = dmy(fecha))
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
as_tsibble(index = fecha)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
as_tsibble(index = fecha) %>%
autoplot()
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot()
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot() +
facet_wrap(~serie)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot() +
facet_wrap(~serie, scales = "free_y")
dane_ts <- raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
dane_ts %>%
autoplot(color = NULL) +
facet_wrap(~serie, scales = "free_y")
dane_ts %>%
autoplot(color = "black") +
facet_wrap(~serie, scales = "free_y")
dmy("01-06-2018")
dane_ts %>%
filter(date < dmy("01-06-2018"))
dane_ts %>%
filter(date <= dmy("01-06-2018"))
dane_ts %>%
filter(fecha <= dmy("01-06-2018"))
dane_ts
dane_train <- dane_ts %>%
filter(fecha <= dmy("01-06-2018"))
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
dane_train <- dane_ts %>%
filter(fecha < dmy("01-06-2018"))
View(dane_train)
dane_train
dane_train %>% summary()
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
raw_data_dane %>%
mutate(fecha = dmy(fecha),
fecha = yearmonth(fecha))
dane_ts <- raw_data_dane %>%
mutate(fecha = dmy(fecha),
fecha = yearmonth(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
#Gráfica de todas las series
dane_ts %>%
autoplot(color = "black") +
facet_wrap(~serie, scales = "free_y")
dane_train <- dane_ts %>%
filter(fecha < dmy("01-06-2018"))
View(dane_train)
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
dane_forecast <- dane_fit %>%
forecast(h = "1 year")
dane_forecast %>%
autoplot(filter(dane_ts, year(date) >= 2003),level = NULL)
View(dane_ts)
dane_forecast %>%
autoplot(filter(dane_ts, yearmonth(date) >= 2003),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, date >= as_date("2003-01-01")),level = NULL)
as_date("2003-01-01")
yearmonth("2003-01-01")
dane_forecast %>%
autoplot(filter(dane_ts, date >= yearmonth("2003-01-01")),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap(~.model)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap(~serie)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 2, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast <- dane_fit %>%
forecast(h = "2 years")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 2, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(.model~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
setwd("~/GitHub/Multi-SKU-Forecast")
accuracy(dane_forecast)
accuracy(dane_forecast, data = dane_ts)
accuracy(dane_forecast, data = dane_ts) %>%
write_excel_csv2("accuracy.csv")
accuracy(dane_forecast, data = dane_ts) %>%
write_excel_csv2("accuracy_dane.csv")
ggsave("plots1.png", units = "cm", width = 16, height = 10)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 1) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 10)
ggsave("plots1.png", units = "cm", width = 20, height = 8)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.5) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 8)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.5) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 8)
ggsave("plots1.png", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(.model = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(model = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(color = "Modelo")
dane_forecast
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(color = "Modelo")
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor", subtitle = "Fuente: DANE"color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor", subtitle = "Fuente: DANE", color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al pormenor (EMCM)",
color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 2) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots2.pdf", units = "cm", width = 20, height = 12)
ggsave("plots3.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 3) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots3.pdf", units = "cm", width = 20, height = 12)
