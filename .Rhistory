raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot()
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot() +
facet_wrap(~serie)
raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie) %>%
autoplot() +
facet_wrap(~serie, scales = "free_y")
dane_ts <- raw_data_dane %>%
mutate(fecha = dmy(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
dane_ts %>%
autoplot(color = NULL) +
facet_wrap(~serie, scales = "free_y")
dane_ts %>%
autoplot(color = "black") +
facet_wrap(~serie, scales = "free_y")
dmy("01-06-2018")
dane_ts %>%
filter(date < dmy("01-06-2018"))
dane_ts %>%
filter(date <= dmy("01-06-2018"))
dane_ts %>%
filter(fecha <= dmy("01-06-2018"))
dane_ts
dane_train <- dane_ts %>%
filter(fecha <= dmy("01-06-2018"))
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
dane_train <- dane_ts %>%
filter(fecha < dmy("01-06-2018"))
View(dane_train)
dane_train
dane_train %>% summary()
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
raw_data_dane %>%
mutate(fecha = dmy(fecha),
fecha = yearmonth(fecha))
dane_ts <- raw_data_dane %>%
mutate(fecha = dmy(fecha),
fecha = yearmonth(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
#Gráfica de todas las series
dane_ts %>%
autoplot(color = "black") +
facet_wrap(~serie, scales = "free_y")
dane_train <- dane_ts %>%
filter(fecha < dmy("01-06-2018"))
View(dane_train)
dane_fit <-  dane_train %>%
model(
"Global con indicadoras" = TSLM(value ~ trend() + season()),
Arima = ARIMA(value),
"Suavizamientos exponenciales" = ETS(box_cox(value, 0.3)),
Promedio = MEAN(value)
)
dane_forecast <- dane_fit %>%
forecast(h = "1 year")
dane_forecast %>%
autoplot(filter(dane_ts, year(date) >= 2003),level = NULL)
View(dane_ts)
dane_forecast %>%
autoplot(filter(dane_ts, yearmonth(date) >= 2003),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, date >= as_date("2003-01-01")),level = NULL)
as_date("2003-01-01")
yearmonth("2003-01-01")
dane_forecast %>%
autoplot(filter(dane_ts, date >= yearmonth("2003-01-01")),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap(~.model)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap(~serie)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 2, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast <- dane_fit %>%
forecast(h = "2 years")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 2, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(.model~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point() +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
setwd("~/GitHub/Multi-SKU-Forecast")
accuracy(dane_forecast)
accuracy(dane_forecast, data = dane_ts)
accuracy(dane_forecast, data = dane_ts) %>%
write_excel_csv2("accuracy.csv")
accuracy(dane_forecast, data = dane_ts) %>%
write_excel_csv2("accuracy_dane.csv")
ggsave("plots1.png", units = "cm", width = 16, height = 10)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 1) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 10)
ggsave("plots1.png", units = "cm", width = 20, height = 8)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.5) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "right", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 8)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.5) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 8)
ggsave("plots1.png", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8))
ggsave("plots1.png", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(.model = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(model = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2003-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(color = "Modelo")
dane_forecast
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(color = "Modelo")
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor", subtitle = "Fuente: DANE"color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor", subtitle = "Fuente: DANE", color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al pormenor (EMCM)",
color = "Modelo")
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 1) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots1.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 2) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots2.pdf", units = "cm", width = 20, height = 12)
ggsave("plots3.pdf", units = "cm", width = 20, height = 12)
dane_forecast %>%
autoplot(filter(dane_ts, fecha >= yearmonth("2015-01-01")),level = NULL) +
geom_point(size = 0.8) +
facet_wrap_paginate(~serie, ncol = 1, nrow = 2, scales = "free_y", page = 3) +
theme_bw() +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8)) +
labs(title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)",
color = "Modelo")
ggsave("plots3.pdf", units = "cm", width = 20, height = 12)
library(tidyverse)
library(lubridate)
library(tsibble)
library(fable)
library(broom)
library(googledrive)
library(googlesheets4)
library(ggforce)
library(readxl)
raw_data_dane <- read_excel("EMCM_Serie_indices_nal_empalmada_jun19.xls", range = "1.2!C7:T205")
dane_ts <- raw_data_dane %>%
mutate(fecha = yearmonth(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
#Gr?fica de todas las series
dane_ts %>%
autoplot(color = "black") +
facet_wrap(~serie, scales = "free_y", nrow = 6, ncol = 3) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 45, hjust = 0.8))
dane_train <- dane_ts %>%
filter(fecha < dmy("01-05-2018"))
#Gr?fica de todas las series
dane_ts %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 6, ncol = 3) +
theme(legend.position = "bottom") +
labs(y = "valor",
x = "Fecha - frecuencia mensual")
#Gr?fica de todas las series
dane_ts %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 6, ncol = 3) +
theme(legend.position = "bottom", legend.title = element_blank()) +
labs(y = "valor",
x = "Fecha - frecuencia mensual")
#Gr?fica de todas las series
dane_ts %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 6, ncol = 3) +
theme(legend.position = "none") +
labs(y = "valor",
x = "Fecha - frecuencia mensual")
#Gr?fica de todas las series
dane_ts %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 6, ncol = 3) +
theme(legend.position = "none") +
labs(y = "valor",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
ggsave("series_dane_graficas.png", units = "cm", width = 16, height = 24)
dane_ts
View(dane_ts)
dane_ts %>%
filter(serie != "Alimentos (víveres en general) y bebidas no alcohólicas")
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería" &
serie != "Electrodomésticos, muebles para el hogar" &
serie != "Prendas de vestir y textiles")
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería" &
serie != "Electrodomésticos, muebles para el hogar")
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 3, ncol = 3) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería" &
serie != "Electrodomésticos, muebles para el hogar")
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería" &
serie != "Electrodomésticos, muebles para el hogar") %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 3, ncol = 3) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
ggsave("series_dane_graficas.png", units = "cm", width = 16, height = 24)
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería" &
serie != "Electrodomésticos, muebles para el hogar") %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 5, ncol = 2) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 5, ncol = 2) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
ggsave("series_dane_graficas.png", units = "cm", width = 16, height = 24)
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería")
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
mutate(serie = case_when(serie = "Alimentos (víveres en general) y bebidas no alcohólicas" ~ "Alimentos y bebidas no alcohólicas"))
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
mutate(serie = case_when(serie == "Alimentos (víveres en general) y bebidas no alcohólicas" ~ "Alimentos y bebidas no alcohólicas"))
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
mutate(serie = case_when(serie == "Alimentos (víveres en general) y bebidas no alcohólicas" ~ "Alimentos y bebidas no alcohólicas"))
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
mutate(serie = case_when(serie == "Alimentos (víveres en general) y bebidas no alcohólicas" ~ "Alimentos y bebidas no alcohólicas"))
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
mutate(serie = case_when(serie == "Alimentos (víveres en general) y bebidas no alcohólicas" ~ "Alimentos y bebidas no alcohólicas"))
#Gr?fica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 5, ncol = 2) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
raw_data_dane <- read_excel("EMCM_Serie_indices_nal_empalmada_jun19.xls", range = "1.2!C7:T205")
dane_ts <- raw_data_dane %>%
mutate(fecha = yearmonth(fecha)) %>%
gather(key = serie, value = "value", -fecha) %>%
as_tsibble(index = fecha, key = serie)
#Gráfica de todas las series
dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería") %>%
autoplot() +
facet_wrap(~serie, scales = "free", nrow = 5, ncol = 2) +
theme(legend.position = "none") +
labs(y = "Valor (Puntos)",
x = "Fecha - frecuencia mensual",
title = "Índice empalmado de ventas reales al por menor",
subtitle = "Datos obtenidos de: Encuesta Mensual de Comercio al por Menor (EMCM)")
ggsave("series_dane_graficas.png", units = "cm", width = 16, height = 24)
ggsave("series_dane_graficas.png", units = "cm", width = 16, height = 23)
#Gráfica de todas las series
dane_10 <- dane_ts %>%
filter(serie != "Artículos de ferretería y pinturas" &
serie != "Total Comercio Minorista sin Combustibles" &
serie != "Total Comercio Minorista sin Combustibles ni Vehículos" &
serie != "Calzado, artículos de cuero y sucedáneos del cuero" &
serie != "Artículos y utensilios de uso doméstico" &
serie != "Otras mercancías para uso personal o doméstico, no especificadas anteriormente" &
serie != "Productos de aseo personal, cosméticos y perfumería")
